mean(abs(rnorm(100)))
mean(abs(rnorm(100)))
mean(abs(rnorm(100)))
mean(abs(rnorm(100)))
mean(abs(rnorm(100)))
mean(abs(rnorm(100)))
mean(abs(rnorm(100)))
pdf("xh.pdf") # sets the graphical output file
hist(rnorm(100)) # plot histogram of 100 variates
dev.off() # closes the graphical output file
x <- c(1,2,4)
q <- c(x,x,8)
q <- c(x,x,8)
q
x[3] # use [] to get elements of a vector, in this case the 3rd
data()
mean(nile)
mean(Nile)
hist(Nile)
library( expm)
# Load the matrix - note transpose to get things the right way around
T <- t(as.matrix( read.csv( "Rmat.csv", h = F) ))
# Four equivalent ways to get the solution for the stable state distribution:
# Iterate the model
n <- matrix( rep(0.2, 5), nrow = 5)
for(i in 1:100) n <- T %*% n
n
# or:
n <- matrix( rep(0.2, 5), nrow = 5)
n <- T %^% 100 %*% n
n
# Solve the eigensystem
es <- eigen( T )
n1 <- es$vector %*% es$values^100 / sum(es$vector)
n1
# or:
es <- eigen( T )
n2 <- es$vector[,1] / sum(es$vector[,1])
n2
n
n <- matrix( rep(0.2, 5), nrow = 5)
for(i in 1:100) n <- T %*% n
n
T
Tx <- t(as.matrix( read.csv( "Rmat.csv", h = F) ))
version
version
?library
res.mat<-matrix(0,ncol=5,nrow=5) # no rotation - Second year columns, first year rows. Numbers are density states.
res.mat1<-matrix(0,ncol=5,nrow=5) # rotation
write.matrix(res.mat,'/data/bop14rg/Iceberg_scripts/year1_ib.txt',sep = "\t")
library(MASS
)
write.matrix(res.mat,'/data/bop14rg/Iceberg_scripts/year1_ib.txt',sep = "\t")
write.matrix(res.mat,'PhD/R files/',sep = "\t")
write.matrix(res.mat,'C:/Users/Robert/Documents/PhD/R files/yeartest.txt',sep = "\t")
dens <- c(12,25,50,100,250,500)
loss <- c(5,10,15,20,35,50)
max<-c(15,25,35,50,65,70)
min<-c(1,1,1,5,10,20)
comb<-data.frame (max,min)
comb
}
sd<-sd.func(comb$max,comb$min)
sd.func<-function(max,min){
(max-min)/4
}
sd<-sd.func(comb$max,comb$min)
sd
libary(ggplot2)
library(ggplot2)
forplot<-data.frame(dens,loss)
forplot
ggplot(forplot)
ggplot(forplot,aes(x=dens,y=loss))
ggplot(data=forplot,aes(x=dens,y=loss))
ggplot(data=forplot,aes(x=dens,y=loss)) +geom_dotplot()
ggplot(data=forplot,aes(x=dens,y=loss)) +geom_line
ggplot(data=forplot,aes(x=dens,y=loss)) +geom_line()
limits <- aes(ymax = forplot$loss + sd, ymin=forplot$loss - sd)
ggplot(data=forplot,aes(x=dens,y=loss)) +geom_line()+ geom_errorbar(limits, position=dodge, width=0.25)
ggplot(data=forplot,aes(x=dens,y=loss)) +geom_line()+ geom_errorbar(limits, width=0.25)
ggplot(data=forplot,aes(x=dens,y=loss)) +geom_line()+ geom_errorbar(limits, width=20)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +geom_line()+ geom_errorbar(limits, width=20)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +geom_line()+ geom_errorbar(limits, width=1)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +geom_line()+ geom_errorbar(limits, width=0.25)
ggplot(data=forplot,aes(x=dens,y=loss)) +geom_line()+ geom_errorbar(limits, width=0.25)
ggplot(data=forplot,aes(x=dens,y=loss)) +geom_line()+ geom_errorbar(limits, width=10)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +geom_line()+ geom_errorbar(limits, width=0.25)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +geom_line(colour="Red",width=2)+ geom_errorbar(limits, width=0.25)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +geom_line(colour="Red",size=2)+ geom_errorbar(limits, width=0.25)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +geom_line(colour="Red",size=2)+ geom_errorbar(limits, width=0.25, size=1.2)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +geom_line(colour="Red",size=1.2)+ geom_errorbar(limits, width=0.25, size=1.2)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +geom_line(colour="Red",size=1.2)+ geom_errorbar(limits, width=0.25, size=1)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17))
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
theme(axis.title.x = element_text(text="Log Density", face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17))
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
theme(axis.title.x = element_text(text="Log Density", face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17))
?element_text
?scale_y_continuous
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
scale_y_continuous(text="Log Density")+
scale_x_continuous(text="% Yield Loss")+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17))
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
scale_y_continuous("Log Density")+
scale_x_continuous("% Yield Loss")+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17))
?theme
?panel.grid
panel.grid.major
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
scale_y_continuous("Log Density")+
scale_x_continuous("% Yield Loss")+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17)
plot.background=F)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
scale_y_continuous("Log Density")+
scale_x_continuous("% Yield Loss")+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17),
plot.background=F
)
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
scale_y_continuous("Log Density")+
scale_x_continuous("% Yield Loss")+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17),
plot.background=element_rect())
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
scale_y_continuous("Log Density")+
scale_x_continuous("% Yield Loss")+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17),
plot.background=element_rect(F))
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
scale_y_continuous("Log Density")+
scale_x_continuous("% Yield Loss")+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17),
plot.background=element_rect(NULL))
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
scale_y_continuous("Log Density")+
scale_x_continuous("% Yield Loss")+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17),
panel.grid=element_line(NULL))
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
scale_y_continuous("Log Density")+
scale_x_continuous("% Yield Loss")+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17),
panel.grid.major=element_line(NULL))
ggplot(data=forplot,aes(x=log(dens),y=loss)) +
geom_line(colour="Red",size=1.2)+
geom_errorbar(limits, width=0.25, size=1)+
scale_y_continuous("% Yield Loss")+
scale_x_continuous("Log Density")+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y  = element_text(face="bold", colour="#990000", size=20),
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=17),
panel.grid.major=element_line(NULL))
?graphics.off()
rm(list=ls())
?graphics.off()
# fun
spiral.rec <- function(start, dir=90, length, end, change, count, colour){
point_n<-c(start[1] + length*cos(dir*pi/180), start[2] + length*sin(dir*pi/180))
count <- ifelse(count != 200, count+1, 1)
lines(c(start[1], point_n[1]), c(start[2], point_n[2]), col=colour[count])
start<-point_n
if (length>end){
spiral.rec(start, dir+change, length*0.995, end, change, count, colour)
}
}
# do
colour <- terrain.colors(200)
par(mai = c(0.1, 0.1, 0.1, 0.1))
plot(1, 1, xlim=c(4.8,11), ylim=c(0,7), type="n", ann=F, xaxt="n", yaxt="n")
spiral.rec(c(10,1), length=5, end=.05, change = 100, count = 1, colour = colour)
f=function(s,t=0,d=1.57,l=.5,o=1){p=s+l*cos(d);q=t+l*sin(d);arrows(s,t,p,q,0)
if(l>.005){o=-o;f(p,q,d,l*.87,o);f(p,q,d+.7*o,l*.4,o)}}
plot(c(0,2),c(0,4),type="n")
f(1)
densVals <- optGammaFun(fieldsProp[1,3:6],breaks)
setwd("C:/Users/Robert/Documents/PhD/R files/DS_model_weeds/Bayesian model")# set path to the distribution folder
fields <- read.csv("2014_field_states.csv")
head(fields)
## - - - - Function to convert no of cells to proportions - - - - ##
prop.conv.func <- function(cellno){
# adds total column to data frame
cellno[,7]<-apply(cellno[2:6],1,sum)
# works out proportion of field in eachs state using this total
cellno[2:6]<-cellno[2:6]/cellno[,7]
# removes total column
cellno[,-7]
}
# convert to proportion #
fieldsProp <- prop.conv.func(fields)
# ---- Integrates Gamma Function ---
GammaFun <- function( breaks, shape, rate ) {
n <- length(breaks)
starts <- breaks[1:(n-1)]
ends <-  breaks[ 2:n]
probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)
return( probs )
}
# --- Optimizes the gamma function for data and given breaks ---
optGammaFun <- function( ds, breaks, init = c(1, 1) ) {
# --- Function that is optimised, crudely based on least squares ---
optFun <- function( pars) {
shape <- pars[1]
rate <-pars[2]
probs <- GammaFun( breaks, shape, rate)
ssq <-  ( ds - probs )^2
return( sum( ssq) )
}
ds <- ds / sum(ds)
op <- optim( init, optFun)
n <- length(breaks)
shape <- op$par[1]
rate <- op$par[2]
starts <-  breaks[1:(n-1)]
ends <-  breaks[ 2:n]
probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)
x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)
fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)
plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x",
xlab = "State", ylab = "Proportion", ylim = c(0,1))
points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )
mean <- shape / rate
var <- shape / rate^2
return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )
}
# set breaks
breaks <- breaks <-log(c(1,160,450,1450,2000))
densVals <- optGammaFun(fieldsProp[1,3:6],breaks)
densVals
densityValues[field,2:3] <- c(densVals$mean, densVals$var)
densityValues <- data.frame(Field=fieldsProp[,1], Desnity=NA, Variance=NA)
densityValues[1,2:3] <- c(densVals$mean, densVals$var)
densityValues
head(densityValues)
densityValues <- data.frame(Field=fieldsProp[,1], Density=NA, Variance=NA)
densityValues[1,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
avg.dens.func <- function(stateprops){
# remove absent states
#create empty data frame for density and variance values
densityValues <- data.frame(Field=fieldsProp[,1], Density=NA, Variance=NA)
#for loop gamma function for each field into empty data frame
for (field in 1:nrow(fieldsProp)){
densVals <- optGammaFun(fieldsProp[field,3:6],breaks)
densityValues[field,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
}
return(densityValues)
}
Final <- avg.dens.func(fieldsProp)
warnings()
for (field in 1:nrow(fieldsProp)){
densVals <- optGammaFun(fieldsProp[field,3:6],breaks)
densityValues[field,2:3] <- c(densVals$mean, densVals$var)
for (field in 1:nrow(fieldsProp)){
densVals <- optGammaFun(fieldsProp[field,3:6],breaks)
densityValues[field,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
}
nrow(fieldsProp)
for (i in 1:nrow(fieldsProp)){
densVals <- optGammaFun(fieldsProp[i,3:6],breaks)
densityValues[i,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
}
head(densityValues)
densityValues
fieldsProp
densVals <- optGammaFun(fieldsProp[10,3:6],breaks)
densityValues[10,2:3] <- c(densVals$mean, densVals$var)
densVals <- optGammaFun(fieldsProp[10,3:6],breaks)
densityValues[10,2:3] <- c(densVals$mean, densVals$var)
densityValues[10,2:3]
densityValues
densVals <- optGammaFun(fieldsProp[44,3:6],breaks)
fieldsProp[44]
fieldsProp[44,]
fieldsProp[45,]
for (i in 1:nrow(fieldsProp)){
if (sum(fieldsProp[i,3:6]>0){
densVals <- optGammaFun(fieldsProp[i,3:6],breaks)}
densityValues[i,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
}
if (sum(fieldsProp[i,3:6]>0){
if (sum(fieldsProp[i,3:6]>0){
if (sum(fieldsProp[i,3:6]>0) {
densVals <- optGammaFun(fieldsProp[i,3:6],breaks)}
if (sum(fieldsProp[i,3:6]>0))
{
densVals <- optGammaFun(fieldsProp[i,3:6],breaks)}
densityValues[i,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
for (i in 1:nrow(fieldsProp)){
if (sum(fieldsProp[i,3:6]>0))
{
densVals <- optGammaFun(fieldsProp[i,3:6],breaks)}
densityValues[i,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
}
return(densityValues)
}
warnings()
densityValues
avg.dens.func <- function(stateprops){
# remove absent states
#create empty data frame for density and variance values
densityValues <- data.frame(Field=fieldsProp[,1], Density=NA, Variance=NA)
#for loop gamma function for each field into empty data frame
for (i in 1:nrow(fieldsProp)){
if (sum(fieldsProp[i,3:6]>0))
{
densVals <- optGammaFun(fieldsProp[i,3:6],breaks)}
densityValues[i,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
}
return(densityValues)
}
avg.dens.func <- function(stateprops){
# remove absent states
#create empty data frame for density and variance values
densityValues <- data.frame(Field=stateprops[,1], Density=NA, Variance=NA)
#for loop gamma function for each field into empty data frame
for (i in 1:nrow(stateprops)){
if (sum(stateprops[i,3:6]>0))
{
densVals <- optGammaFun(stateprops[i,3:6],breaks)}
densityValues[i,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
}
return(densityValues)
}
Final <- avg.dens.func(fieldsProp)
Final
library(dplyr)
view(fieldsProp)
view(fieldsProp)
View(fieldsProp)
avg.dens.func <- function(stateprops){
# remove absent states
#create empty data frame for density and variance values
densityValues <- data.frame(Field=stateprops[,1], Density=NA, Variance=NA)
#for loop gamma function for each field into empty data frame
for (i in 1:nrow(stateprops)){
densVals <- optGammaFun(stateprops[i,3:6],breaks)
densityValues[i,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
}
return(densityValues)
}
fieldsProp <- prop.conv.func(fields)
Final <- avg.dens.func(fieldsProp)
warnings
warnings()
avg.dens.func <- function(stateprops){
if (sum(stateprops[3:6])==0){next}
#create empty data frame for density and variance values
densityValues <- data.frame(Field=stateprops[,1], Density=NA, Variance=NA)
#for loop gamma function for each field into empty data frame
for (i in 1:nrow(stateprops)){
densVals <- optGammaFun(stateprops[i,3:6],breaks)
densityValues[i,2:3] <- c(densVals$mean, densVals$var)
head(densityValues)
}
return(densityValues)
}
Final <- avg.dens.func(fieldsProp)
Final
optGammaFun(fieldsProp[44,3:6],breaks)
fieldsProp[44,3:6]
head(densityValues)
optGammaFun(fieldsProp[6,3:6],breaks)
fieldsProp[6,3:6]
setwd("C:/Users/Robert/Documents/PhD/R files/DS_model_weeds/Bayesian model")# set path to the distribution folder
source("DS_integration_code.R")
naive_states<-c( 0.146640624, 0.022180724, 0.013461759, 0.004526887)
no_rotation_states<-c( 0.11939217, 0.02278082, 0.03122278, 0.01298473)
rotation_states<-c( 0.139779896, 0.017298175, 0.007673011, 0.002672391)
# breaks for gamma func ##
breaks <-log(c(1,160,450,1450,2000))
naive<-optGammaFun(naive_states,breaks)
no_rot<-optGammaFun(no_rotation_states,breaks)
rot<-optGammaFun(rotation_states,breaks)
naive
no_rot<-optGammaFun(no_rotation_states,breaks)
no_rot
rot
props <- stateprops[i,3:6]
props <- fieldsProp[1,3:6]
fieldsProp <- prop.conv.func(fields)
setwd("C:/Users/Robert/Documents/PhD/R files/DS_model_weeds/Bayesian model")# set path to the distribution folder
library(dplyr)
fields <- read.csv("2014_field_states.csv")
head(fields)
## - - - - Function to convert no of cells to proportions - - - - ##
prop.conv.func <- function(cellno){
# adds total column to data frame
cellno[,7]<-apply(cellno[2:6],1,sum)
# works out proportion of field in eachs state using this total
cellno[2:6]<-cellno[2:6]/cellno[,7]
# removes total column
cellno[,-7]
}
# convert to proportion #
fieldsProp <- prop.conv.func(fields)
View(fieldsProp)
GammaFun <- function( breaks, shape, rate ) {
n <- length(breaks)
starts <- breaks[1:(n-1)]
ends <-  breaks[ 2:n]
probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)
return( probs )
}
optGammaFun <- function( ds, breaks, init = c(1, 1) ) {
# --- Function that is optimised, crudely based on least squares ---
optFun <- function( pars) {
shape <- pars[1]
rate <-pars[2]
probs <- GammaFun( breaks, shape, rate)
ssq <-  ( ds - probs )^2
return( sum( ssq) )
}
ds <- ds / sum(ds)
op <- optim( init, optFun)
n <- length(breaks)
shape <- op$par[1]
rate <- op$par[2]
starts <-  breaks[1:(n-1)]
ends <-  breaks[ 2:n]
probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)
x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)
fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)
plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x",
xlab = "State", ylab = "Proportion", ylim = c(0,1))
points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )
mean <- shape / rate
var <- shape / rate^2
return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )
}
breaks <- breaks <-log(c(1,160,450,1450,2000))
props <- fieldsProp[1,3:6]
props
class(props)
naive_states<-c( 0.146640624, 0.022180724, 0.013461759, 0.004526887)
class(naive_states)
